import{B as D,f as F}from"./util-DD-gIz1a.js";import{I as C,Q as y,u as x,a1 as I,O as E}from"./index-Cb9Tbun5.js";import{I as B}from"./main-BPWpXae6.js";class R extends C.BaseFeatureDataAdapter{constructor(){super(...arguments),this.intervalTrees={}}async loadDataP(e={}){const t=this.pluginManager,o=this.getConf("bedLocation"),a=await y.openLocation(o,t).readFile(e),n=x.isGzip(a)?await I(a):a;if(n.length>536870888)throw new Error("Data exceeds maximum string length (512MB)");const s=new TextDecoder("utf8",{fatal:!0}).decode(n).split(/\n|\r\n|\r/).filter(d=>!!d),i=[];let r=0;for(;r<s.length&&s[r].startsWith("#");r++)i.push(s[r]);const f=i.join(`
`),l={};for(;r<s.length;r++){const d=s[r],T=d.indexOf("	"),g=d.slice(0,T);l[g]||(l[g]=[]),l[g].push(d)}const c=this.getConf("autoSql"),h=new D({autoSql:c}),p=this.getConf("columnNames"),m=this.getConf("scoreColumn"),v=this.getConf("colRef"),w=this.getConf("colStart"),b=this.getConf("colEnd");return{header:f,features:l,parser:h,columnNames:p,scoreColumn:m,colRef:v,colStart:w,colEnd:b}}async loadData(e={}){return this.bedFeatures||(this.bedFeatures=this.loadDataP(e).catch(t=>{throw this.bedFeatures=void 0,t})),this.bedFeatures}async getRefNames(e={}){const{features:t}=await this.loadData(e);return Object.keys(t)}async getHeader(e={}){const{header:t}=await this.loadData(e);return t}async getNames(){const{header:e,columnNames:t}=await this.loadData();if(t.length)return t;const a=e.split(/\n|\r\n|\r/).filter(n=>!!n).at(-1);return a!=null&&a.includes("	")?a.slice(1).split("	").map(n=>n.trim()):void 0}async loadFeatureIntervalTreeHelper(e){const{colRef:t,colStart:o,colEnd:a,features:n,parser:u,scoreColumn:s}=await this.loadData(),i=n[e];if(!i)return;const r=await this.getNames(),f=new B,l=i.map((c,h)=>{const p=`${this.id}-${e}-${h}`;return F(c,t,o,a,s,u,p,r)});for(const c of l)f.insert([c.get("start"),c.get("end")],c);return f}async loadFeatureIntervalTree(e){return this.intervalTrees[e]||(this.intervalTrees[e]=this.loadFeatureIntervalTreeHelper(e).catch(t=>{throw this.intervalTrees[e]=void 0,t})),this.intervalTrees[e]}getFeatures(e,t={}){return E(async o=>{const{start:a,end:n,refName:u}=e,s=await this.loadFeatureIntervalTree(u);s==null||s.search([a,n]).forEach(i=>{o.next(i)}),o.complete()},t.signal)}freeResources(){}}R.capabilities=["getFeatures","getRefNames"];export{R as default};
//# sourceMappingURL=BedAdapter-DCU7rqwH.js.map
