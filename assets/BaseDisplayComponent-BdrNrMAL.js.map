{"version":3,"file":"BaseDisplayComponent-BdrNrMAL.js","sources":["../node_modules/@jbrowse/plugin-alignments/esm/shared/BaseDisplayComponent.js"],"sourcesContent":["import React from 'react';\nimport { LoadingEllipses } from '@jbrowse/core/ui';\nimport { BlockMsg, } from '@jbrowse/plugin-linear-genome-view';\nimport { makeStyles } from 'tss-react/mui';\nimport { observer } from 'mobx-react';\nimport { getContainingView } from '@jbrowse/core/util';\nimport { Button, Tooltip } from '@mui/material';\nconst useStyles = makeStyles()(theme => ({\n    loading: {\n        backgroundColor: theme.palette.background.default,\n        backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 5px, ${theme.palette.action.disabledBackground} 5px, ${theme.palette.action.disabledBackground} 10px)`,\n        position: 'absolute',\n        bottom: 0,\n        height: 50,\n        width: 300,\n        right: 0,\n        pointerEvents: 'none',\n        textAlign: 'center',\n    },\n}));\nconst BaseDisplayComponent = observer(function ({ model, children, }) {\n    const { error, regionTooLarge } = model;\n    return error ? (React.createElement(BlockMsg, { message: `${error}`, severity: \"error\", action: React.createElement(Tooltip, { title: \"Reload\" },\n            React.createElement(Button, { \"data-testid\": \"reload_button\", onClick: () => {\n                    model.reload();\n                } }, \"Reload\")) })) : regionTooLarge ? (model.regionCannotBeRendered()) : (React.createElement(DataDisplay, { model: model }, children));\n});\nconst DataDisplay = observer(function ({ model, children, }) {\n    const { drawn, loading } = model;\n    const view = getContainingView(model);\n    const left = (model.lastDrawnOffsetPx || 0) - view.offsetPx;\n    return (\n    // this data-testid is located here because changing props on the canvas\n    // itself is very sensitive to triggering ref invalidation\n    React.createElement(\"div\", { \"data-testid\": `drawn-${drawn}` },\n        React.createElement(\"div\", { style: { position: 'absolute', left } }, children),\n        left !== 0 || loading ? React.createElement(LoadingBar, { model: model }) : null));\n});\nconst LoadingBar = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const { message } = model;\n    return (React.createElement(\"div\", { className: classes.loading },\n        React.createElement(LoadingEllipses, { message: message })));\n});\nexport default BaseDisplayComponent;\n"],"names":["useStyles","makeStyles","theme","BaseDisplayComponent","observer","model","children","error","regionTooLarge","React","BlockMsg","Tooltip","Button","DataDisplay","drawn","loading","view","getContainingView","left","LoadingBar","classes","message","LoadingEllipses"],"mappings":"wFAOA,MAAMA,EAAYC,EAAY,EAACC,IAAU,CACrC,QAAS,CACL,gBAAiBA,EAAM,QAAQ,WAAW,QAC1C,gBAAiB,kEAAkEA,EAAM,QAAQ,OAAO,kBAAkB,SAASA,EAAM,QAAQ,OAAO,kBAAkB,SAC1K,SAAU,WACV,OAAQ,EACR,OAAQ,GACR,MAAO,IACP,MAAO,EACP,cAAe,OACf,UAAW,QACd,CACL,EAAE,EACIC,EAAuBC,EAAS,SAAU,CAAE,MAAAC,EAAO,SAAAC,CAAQ,EAAK,CAClE,KAAM,CAAE,MAAAC,EAAO,eAAAC,CAAc,EAAKH,EAClC,OAAOE,EAASE,EAAM,cAAcC,EAAU,CAAE,QAAS,GAAGH,CAAK,GAAI,SAAU,QAAS,OAAQE,EAAM,cAAcE,EAAS,CAAE,MAAO,QAAU,EACxIF,EAAM,cAAcG,EAAQ,CAAE,cAAe,gBAAiB,QAAS,IAAM,CACrEP,EAAM,OAAQ,CAClC,CAAmB,EAAE,QAAQ,CAAC,CAAC,CAAE,EAAKG,EAAkBH,EAAM,uBAAsB,EAAOI,EAAM,cAAcI,EAAa,CAAE,MAAOR,CAAK,EAAIC,CAAQ,CACtJ,CAAC,EACKO,EAAcT,EAAS,SAAU,CAAE,MAAAC,EAAO,SAAAC,CAAQ,EAAK,CACzD,KAAM,CAAE,MAAAQ,EAAO,QAAAC,CAAO,EAAKV,EACrBW,EAAOC,EAAiB,kBAACZ,CAAK,EAC9Ba,GAAQb,EAAM,mBAAqB,GAAKW,EAAK,SACnD,OAGAP,EAAM,cAAc,MAAO,CAAE,cAAe,SAASK,CAAK,EAAI,EAC1DL,EAAM,cAAc,MAAO,CAAE,MAAO,CAAE,SAAU,WAAY,KAAAS,EAAQ,EAAEZ,CAAQ,EAC9EY,IAAS,GAAKH,EAAUN,EAAM,cAAcU,EAAY,CAAE,MAAOd,EAAO,EAAI,IAAI,CACxF,CAAC,EACKc,EAAaf,EAAS,SAAU,CAAE,MAAAC,GAAU,CAC9C,KAAM,CAAE,QAAAe,CAAS,EAAGpB,EAAW,EACzB,CAAE,QAAAqB,CAAO,EAAKhB,EACpB,OAAQI,EAAM,cAAc,MAAO,CAAE,UAAWW,EAAQ,OAAS,EAC7DX,EAAM,cAAca,EAAe,gBAAE,CAAE,QAASD,CAAS,CAAA,CAAC,CAClE,CAAC","x_google_ignoreList":[0]}