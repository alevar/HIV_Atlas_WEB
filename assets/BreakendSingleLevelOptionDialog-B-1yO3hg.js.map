{"version":3,"file":"BreakendSingleLevelOptionDialog-B-1yO3hg.js","sources":["../node_modules/@jbrowse/sv-core/esm/Checkbox2.js","../node_modules/@jbrowse/sv-core/esm/BreakendMultiLevelOptionDialog.js","../node_modules/@jbrowse/sv-core/esm/BreakendSingleLevelOptionDialog.js"],"sourcesContent":["import React from 'react';\nimport { Checkbox, FormControlLabel } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    block: {\n        display: 'block',\n    },\n});\nexport default function Checkbox2({ checked, disabled, label, onChange, }) {\n    const { classes } = useStyles();\n    return (React.createElement(FormControlLabel, { disabled: disabled, className: classes.block, control: React.createElement(Checkbox, { checked: checked, onChange: onChange }), label: label }));\n}\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { when } from 'mobx';\nimport { getSession } from '@jbrowse/core/util';\n// locals\nimport Checkbox2 from './Checkbox2';\nfunction stripIds(arr) {\n    return arr.map(({ id, displays, ...rest }) => ({\n        ...rest,\n        displays: displays.map(({ id, ...rest }) => rest),\n    }));\n}\nconst BreakendMultiLevelOptionDialog = observer(function ({ model, handleClose, feature, assemblyName, viewType, view, }) {\n    const [copyTracks, setCopyTracks] = useState(true);\n    const [mirror, setMirror] = useState(true);\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Multi-level breakpoint split view options\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Checkbox2, { checked: copyTracks, label: \"Copy tracks into the new view\", onChange: event => {\n                    setCopyTracks(event.target.checked);\n                } }),\n            copyTracks ? (React.createElement(Checkbox2, { checked: mirror, disabled: !copyTracks, label: \"Mirror the copied tracks (only available if copying tracks and using two level)\", onChange: event => {\n                    setMirror(event.target.checked);\n                } })) : null),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    ;\n                    (async () => {\n                        const session = getSession(model);\n                        try {\n                            const asm = await session.assemblyManager.waitForAssembly(assemblyName);\n                            if (!asm) {\n                                throw new Error(`assembly ${assemblyName} not found`);\n                            }\n                            const { refName, pos, mateRefName, matePos } = viewType.getBreakendCoveringRegions({\n                                feature,\n                                assembly: asm,\n                            });\n                            const viewTracks = getSnapshot(view.tracks);\n                            const breakpointSplitView = session.addView('BreakpointSplitView', {\n                                type: 'BreakpointSplitView',\n                                displayName: `${feature.get('name') || feature.get('id') || 'breakend'} split detail`,\n                                views: [\n                                    {\n                                        type: 'LinearGenomeView',\n                                        hideHeader: true,\n                                        tracks: stripIds(getSnapshot(view.tracks)),\n                                    },\n                                    {\n                                        type: 'LinearGenomeView',\n                                        hideHeader: true,\n                                        tracks: stripIds(mirror ? [...viewTracks].reverse() : viewTracks),\n                                    },\n                                ],\n                            });\n                            const r1 = asm.regions.find(r => r.refName === refName);\n                            const r2 = asm.regions.find(r => r.refName === mateRefName);\n                            if (!r1 || !r2) {\n                                throw new Error(\"can't find regions\");\n                            }\n                            await Promise.all([\n                                breakpointSplitView.views[0].navToLocations([\n                                    {\n                                        refName,\n                                        start: r1.start,\n                                        end: pos,\n                                        assemblyName,\n                                    },\n                                    {\n                                        refName,\n                                        start: pos + 1,\n                                        end: r1.end,\n                                        assemblyName,\n                                    },\n                                ]),\n                                breakpointSplitView.views[1].navToLocations([\n                                    {\n                                        refName: mateRefName,\n                                        start: r2.start,\n                                        end: matePos,\n                                        assemblyName,\n                                    },\n                                    {\n                                        refName: mateRefName,\n                                        start: matePos + 1,\n                                        end: r2.end,\n                                        assemblyName,\n                                    },\n                                ]),\n                            ]);\n                            await when(() => breakpointSplitView.views[1].initialized &&\n                                breakpointSplitView.views[0].initialized);\n                            breakpointSplitView.views[1].zoomTo(10);\n                            breakpointSplitView.views[0].zoomTo(10);\n                            breakpointSplitView.views[1].centerAt(matePos, mateRefName);\n                            breakpointSplitView.views[0].centerAt(pos, refName);\n                        }\n                        catch (e) {\n                            console.error(e);\n                            session.notify(`${e}`);\n                        }\n                    })();\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\", autoFocus: true }, \"OK\"),\n            React.createElement(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                    handleClose();\n                } }, \"Cancel\"))));\n});\nexport default BreakendMultiLevelOptionDialog;\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, DialogActions, DialogContent, TextField } from '@mui/material';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { getSession, gatherOverlaps, useLocalStorage, } from '@jbrowse/core/util';\n// locals\nimport Checkbox2 from './Checkbox2';\nfunction stripIds(arr) {\n    return arr.map(({ id, displays, ...rest }) => ({\n        ...rest,\n        displays: displays.map(({ id, ...rest }) => rest),\n    }));\n}\nconst BreakendSingleLevelOptionDialog = observer(function ({ model, handleClose, feature, assemblyName, viewType, view, }) {\n    const [copyTracks, setCopyTracks] = useState(true);\n    const [windowSize, setWindowSize] = useLocalStorage('breakpointWindowSize', '5000');\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Single-level breakpoint split view options\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Checkbox2, { checked: copyTracks, label: \"Copy tracks into the new view\", onChange: event => {\n                    setCopyTracks(event.target.checked);\n                } }),\n            React.createElement(TextField, { label: \"Window size (bp)\", value: windowSize, onChange: event => {\n                    setWindowSize(event.target.value);\n                } })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    const session = getSession(model);\n                    (async () => {\n                        try {\n                            const assembly = session.assemblyManager.get(assemblyName);\n                            const w = +windowSize;\n                            if (Number.isNaN(w)) {\n                                throw new Error('windowSize not a number');\n                            }\n                            const { refName, pos, mateRefName, matePos } = \n                            // @ts-expect-error\n                            viewType.getBreakendCoveringRegions({ feature, assembly });\n                            const breakpointSplitView = session.addView('BreakpointSplitView', {\n                                type: 'BreakpointSplitView',\n                                displayName: `${feature.get('name') || feature.get('id') || 'breakend'} split detail`,\n                                views: [\n                                    {\n                                        type: 'LinearGenomeView',\n                                        tracks: stripIds(getSnapshot(view.tracks)),\n                                    },\n                                ],\n                            });\n                            await breakpointSplitView.views[0].navToLocations(gatherOverlaps([\n                                {\n                                    refName,\n                                    start: Math.max(0, pos - w),\n                                    end: pos + w,\n                                    assemblyName,\n                                },\n                                {\n                                    refName: mateRefName,\n                                    start: Math.max(0, matePos - w),\n                                    end: matePos + w,\n                                    assemblyName,\n                                },\n                            ], w));\n                        }\n                        catch (e) {\n                            console.error(e);\n                            session.notify(`${e}`);\n                        }\n                    })();\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\", autoFocus: true }, \"OK\"),\n            React.createElement(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                    handleClose();\n                } }, \"Cancel\"))));\n});\nexport default BreakendSingleLevelOptionDialog;\n"],"names":["useStyles","makeStyles","Checkbox2","checked","disabled","label","onChange","classes","React","FormControlLabel","Checkbox","stripIds","arr","id","displays","rest","BreakendMultiLevelOptionDialog","observer","model","handleClose","feature","assemblyName","viewType","view","copyTracks","setCopyTracks","useState","mirror","setMirror","Dialog","DialogContent","event","DialogActions","Button","session","getSession","asm","refName","pos","mateRefName","matePos","viewTracks","getSnapshot","breakpointSplitView","r1","r","r2","when","e","BreakendSingleLevelOptionDialog","windowSize","setWindowSize","useLocalStorage","TextField","assembly","w","gatherOverlaps"],"mappings":"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","x_google_ignoreList":[0,1,2]}