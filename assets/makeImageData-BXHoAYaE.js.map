{"version":3,"file":"makeImageData-BXHoAYaE.js","sources":["../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/util.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/colorBy.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/getAlignmentShapeColor.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderAlignmentShape.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderPerBaseQuality.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderPerBaseLettering.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderModifications.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderMethylation.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderAlignment.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderMismatches.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/renderSoftClipping.js","../../node_modules/@jbrowse/plugin-alignments/esm/PileupRenderer/makeImageData.js"],"sourcesContent":["import { measureText } from '@jbrowse/core/util';\nexport function fillRect(ctx, l, t, w, h, cw, color) {\n    if (l + w < 0 || l > cw) {\n        return;\n    }\n    if (color) {\n        ctx.fillStyle = color;\n    }\n    ctx.fillRect(l, t, w, h);\n}\nexport function getColorBaseMap(theme) {\n    const { bases } = theme.palette;\n    return {\n        A: bases.A.main,\n        C: bases.C.main,\n        G: bases.G.main,\n        T: bases.T.main,\n        deletion: '#808080', // gray\n    };\n}\nexport function getContrastBaseMap(theme) {\n    return Object.fromEntries(Object.entries(getColorBaseMap(theme)).map(([key, value]) => [\n        key,\n        theme.palette.getContrastText(value),\n    ]));\n}\nexport function shouldDrawSNPsMuted(type) {\n    return ['methylation', 'modifications'].includes(type || '');\n}\nexport function shouldDrawIndels() {\n    return true;\n}\n// get width and height of chars the height is an approximation: width letter M\n// is approximately the height\nexport function getCharWidthHeight() {\n    const charWidth = measureText('A');\n    const charHeight = measureText('M') - 2;\n    return { charWidth, charHeight };\n}\n","import { readConfObject, } from '@jbrowse/core/configuration';\nimport { fillColor } from '../shared/color';\nimport { orientationTypes } from '../util';\nexport function colorByInsertSize(feature) {\n    return feature.get('is_paired') &&\n        feature.get('refName') !== feature.get('next_ref')\n        ? '#555'\n        : `hsl(${Math.abs(feature.get('template_length')) / 10},50%,50%)`;\n}\nexport function colorByMappingQuality(feature) {\n    return `hsl(${feature.get('score')},50%,50%)`;\n}\nfunction getOrientation(feature, config) {\n    const orientationType = readConfObject(config, 'orientationType');\n    const type = orientationTypes[orientationType];\n    const orientation = type[feature.get('pair_orientation')];\n    return {\n        LR: 'color_pair_lr',\n        RR: 'color_pair_rr',\n        RL: 'color_pair_rl',\n        LL: 'color_pair_ll',\n    }[orientation];\n}\nexport function colorByStrand(feature) {\n    return feature.get('strand') === -1 ? '#8F8FD8' : '#EC8B8B';\n}\nexport function colorByOrientation(feature, config) {\n    return fillColor[getOrientation(feature, config) || 'color_nostrand'];\n}\nfunction getStranded(feature) {\n    const flags = feature.get('flags');\n    const strand = feature.get('strand');\n    // is paired\n    if (flags & 1) {\n        // first-of-pair?\n        const flipper = flags & 64 ? -1 : 1;\n        // proper pairing\n        if (flags & 2) {\n            return strand * flipper === 1 ? 'color_rev_strand' : 'color_fwd_strand';\n        }\n        // mate missing, separate color\n        if (flags & 8) {\n            return strand * flipper === 1\n                ? 'color_rev_missing_mate'\n                : 'color_fwd_missing_mate';\n        }\n        // same chrom without proper pairing gets separate color\n        if (feature.get('refName') === feature.get('next_ref')) {\n            return strand * flipper === 1\n                ? 'color_rev_strand_not_proper'\n                : 'color_fwd_strand_not_proper';\n        }\n        // abberant chrom\n        return strand === 1 ? 'color_fwd_diff_chr' : 'color_rev_diff_chr';\n    }\n    return 'color_unknown';\n}\nexport function colorByStrandedRnaSeq(feature) {\n    return fillColor[getStranded(feature)];\n}\n","import { readConfObject, } from '@jbrowse/core/configuration';\nimport { fillColor } from '../shared/color';\nimport { colorByInsertSize, colorByMappingQuality, colorByOrientation, colorByStrand, colorByStrandedRnaSeq, } from './colorBy';\nexport function getAlignmentShapeColor({ colorType, tag, feature, config, defaultColor, colorTagMap, }) {\n    // first pass for simple color changes that change the color of the\n    // alignment\n    switch (colorType) {\n        case 'insertSize':\n            return colorByInsertSize(feature);\n        case 'strand':\n            return colorByStrand(feature);\n        case 'mappingQuality':\n            return colorByMappingQuality(feature);\n        case 'pairOrientation':\n            return colorByOrientation(feature, config);\n        case 'stranded':\n            return colorByStrandedRnaSeq(feature);\n        case 'xs':\n        case 'tag': {\n            const tags = feature.get('tags');\n            const val = tags ? tags[tag] : feature.get(tag);\n            if (tag === 'XS' || tag === 'TS') {\n                if (val === '-') {\n                    return fillColor.color_rev_strand;\n                }\n                else if (val === '+') {\n                    return fillColor.color_fwd_strand;\n                }\n                else {\n                    return fillColor.color_nostrand;\n                }\n            }\n            if (tag === 'ts') {\n                if (val === '-') {\n                    return feature.get('strand') === -1\n                        ? fillColor.color_fwd_strand\n                        : fillColor.color_rev_strand;\n                }\n                else if (val === '+') {\n                    return feature.get('strand') === -1\n                        ? fillColor.color_rev_strand\n                        : fillColor.color_fwd_strand;\n                }\n                else {\n                    return fillColor.color_nostrand;\n                }\n            }\n            return colorTagMap[val] || fillColor.color_nostrand;\n        }\n        case 'insertSizeAndPairOrientation':\n            break;\n        case 'modifications':\n        case 'methylation':\n            // this coloring is similar to igv.js, and is helpful to color negative\n            // strand reads differently because their c-g will be flipped (e.g. g-c\n            // read right to left)\n            return feature.get('flags') & 16 ? '#c8dcc8' : '#c8c8c8';\n        default:\n            return defaultColor\n                ? 'lightgrey'\n                : readConfObject(config, 'color', { feature });\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nexport function renderAlignmentShape({ ctx, feat, renderArgs, }) {\n    const { regions, bpPerPx } = renderArgs;\n    const { heightPx, topPx, feature } = feat;\n    const region = regions[0];\n    const s = feature.get('start');\n    const e = feature.get('end');\n    const [leftPx, rightPx] = bpSpanPx(s, e, region, bpPerPx);\n    const flip = region.reversed ? -1 : 1;\n    const strand = feature.get('strand') * flip;\n    if (bpPerPx < 10 && heightPx > 5) {\n        if (strand === -1) {\n            ctx.beginPath();\n            ctx.moveTo(leftPx - 5, topPx + heightPx / 2);\n            ctx.lineTo(leftPx, topPx + heightPx);\n            ctx.lineTo(rightPx, topPx + heightPx);\n            ctx.lineTo(rightPx, topPx);\n            ctx.lineTo(leftPx, topPx);\n            ctx.closePath();\n            ctx.fill();\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(leftPx, topPx);\n            ctx.lineTo(leftPx, topPx + heightPx);\n            ctx.lineTo(rightPx, topPx + heightPx);\n            ctx.lineTo(rightPx + 5, topPx + heightPx / 2);\n            ctx.lineTo(rightPx, topPx);\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n    else {\n        ctx.fillRect(leftPx, topPx, rightPx - leftPx, heightPx);\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { parseCigar } from '../MismatchParser';\nimport { fillRect } from './util';\nexport function renderPerBaseQuality({ ctx, feat, region, bpPerPx, canvasWidth, }) {\n    const { feature, topPx, heightPx } = feat;\n    const qual = feature.get('qual') || '';\n    const scores = qual.split(' ').map(val => +val);\n    const cigarOps = parseCigar(feature.get('CIGAR'));\n    const w = 1 / bpPerPx;\n    const start = feature.get('start');\n    let soffset = 0; // sequence offset\n    let roffset = 0; // reference offset\n    for (let i = 0; i < cigarOps.length; i += 2) {\n        const len = +cigarOps[i];\n        const op = cigarOps[i + 1];\n        if (op === 'S' || op === 'I') {\n            soffset += len;\n        }\n        else if (op === 'D' || op === 'N') {\n            roffset += len;\n        }\n        else if (op === 'M' || op === 'X' || op === '=') {\n            for (let m = 0; m < len; m++) {\n                const score = scores[soffset + m];\n                const start0 = start + roffset + m;\n                const leftPx = bpSpanPx(start0, start0 + 1, region, bpPerPx)[0];\n                const c = `hsl(${score === 255 ? 150 : score * 1.5},55%,50%)`;\n                fillRect(ctx, leftPx, topPx, w + 0.5, heightPx, canvasWidth, c);\n            }\n            soffset += len;\n            roffset += len;\n        }\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { parseCigar } from '../MismatchParser';\nimport { fillRect } from './util';\nexport function renderPerBaseLettering({ ctx, feat, region, bpPerPx, colorForBase, contrastForBase, charWidth, charHeight, canvasWidth, }) {\n    const heightLim = charHeight - 2;\n    const { feature, topPx, heightPx } = feat;\n    const seq = feature.get('seq');\n    const cigarOps = parseCigar(feature.get('CIGAR'));\n    const w = 1 / bpPerPx;\n    const start = feature.get('start');\n    let soffset = 0;\n    let roffset = 0;\n    if (!seq) {\n        return;\n    }\n    for (let i = 0; i < cigarOps.length; i += 2) {\n        const len = +cigarOps[i];\n        const op = cigarOps[i + 1];\n        if (op === 'S' || op === 'I') {\n            soffset += len;\n        }\n        else if (op === 'D' || op === 'N') {\n            roffset += len;\n        }\n        else if (op === 'M' || op === 'X' || op === '=') {\n            for (let m = 0; m < len; m++) {\n                const letter = seq[soffset + m];\n                const r = start + roffset + m;\n                const [leftPx] = bpSpanPx(r, r + 1, region, bpPerPx);\n                const c = colorForBase[letter];\n                fillRect(ctx, leftPx, topPx, w + 0.5, heightPx, canvasWidth, c);\n                if (w >= charWidth && heightPx >= heightLim) {\n                    // normal SNP coloring\n                    ctx.fillStyle = contrastForBase[letter];\n                    ctx.fillText(letter, leftPx + (w - charWidth) / 2 + 1, topPx + heightPx);\n                }\n            }\n            soffset += len;\n            roffset += len;\n        }\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { getModificationPositions, getModificationProbabilities, getNextRefPos, parseCigar, } from '../MismatchParser';\nimport { getTagAlt } from '../util';\nimport { fillRect } from './util';\nimport { colord } from '@jbrowse/core/util/colord';\n// render modifications stored in MM tag in BAM\n//\n// ML stores probabilities as array of numerics and MP is scaled phred scores\n// https://github.com/samtools/hts-specs/pull/418/files#diff-e765c6479316309f56b636f88189cdde8c40b854c7bdcce9ee7fe87a4e76febcR596\n//\n// if we have ML or Ml, it is an 8bit probability, divide by 255\n//\n// if we have MP or Mp it is phred scaled ASCII, which can go up to 90 but\n// has very high likelihood basecalls at that point, we really only care\n// about low qual calls <20 approx\nexport function renderModifications({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, }) {\n    const { feature, topPx, heightPx } = feat;\n    const { modificationTagMap = {} } = renderArgs;\n    const seq = feature.get('seq');\n    if (!seq) {\n        return;\n    }\n    const mm = getTagAlt(feature, 'MM', 'Mm') || '';\n    const cigar = feature.get('CIGAR');\n    const start = feature.get('start');\n    const strand = feature.get('strand');\n    const cigarOps = parseCigar(cigar);\n    const probabilities = getModificationProbabilities(feature);\n    const modifications = getModificationPositions(mm, seq, strand);\n    // probIndex applies across multiple modifications e.g.\n    let probIndex = 0;\n    for (const { type, positions } of modifications) {\n        const col = modificationTagMap[type] || 'black';\n        const base = colord(col);\n        for (const readPos of getNextRefPos(cigarOps, positions)) {\n            const r = start + readPos;\n            const [leftPx, rightPx] = bpSpanPx(r, r + 1, region, bpPerPx);\n            const prob = (probabilities === null || probabilities === void 0 ? void 0 : probabilities[probIndex]) || 0;\n            const c = prob !== 1 ? base.alpha(prob + 0.1).toHslString() : col;\n            const w = rightPx - leftPx + 0.5;\n            fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n            probIndex++;\n        }\n    }\n}\n","import { bpSpanPx } from '@jbrowse/core/util';\nimport { getMethBins } from '../MismatchParser';\nimport { fillRect } from './util';\nimport { colord } from '@jbrowse/core/util/colord';\n// Color by methylation is slightly modified version of color by\n// modifications that focuses on CpG sites, with non-methylated CpG colored\nexport function renderMethylation({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, }) {\n    var _a, _b;\n    const { regionSequence } = renderArgs;\n    const { feature, topPx, heightPx } = feat;\n    if (!regionSequence) {\n        throw new Error('region sequence required for methylation');\n    }\n    const seq = feature.get('seq');\n    if (!seq) {\n        return;\n    }\n    const fstart = feature.get('start');\n    const fend = feature.get('end');\n    const { methBins, methProbs } = getMethBins(feature);\n    function getCol(k) {\n        if (methBins[k]) {\n            const p = methProbs[k] || 0;\n            return (p > 0.5\n                ? colord('red').alpha((p - 0.5) * 2)\n                : colord('blue').alpha(1 - p * 2)).toHslString();\n        }\n        return undefined;\n    }\n    for (let i = 0; i < fend - fstart; i++) {\n        const j = i + fstart;\n        const l1 = (_a = regionSequence[j - region.start + 1]) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        const l2 = (_b = regionSequence[j - region.start + 2]) === null || _b === void 0 ? void 0 : _b.toLowerCase();\n        if (l1 === 'c' && l2 === 'g') {\n            if (bpPerPx > 2) {\n                const [leftPx, rightPx] = bpSpanPx(j, j + 2, region, bpPerPx);\n                const w = rightPx - leftPx + 0.5;\n                const c = getCol(i) || getCol(i + 1) || 'blue';\n                fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n            }\n            else {\n                const [leftPx, rightPx] = bpSpanPx(j, j + 1, region, bpPerPx);\n                const w = rightPx - leftPx + 0.5;\n                const c = getCol(i) || 'blue';\n                fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);\n                const [leftPx2, rightPx2] = bpSpanPx(j + 1, j + 2, region, bpPerPx);\n                const w2 = rightPx2 - leftPx2 + 0.5;\n                const c2 = getCol(i + 1) || 'blue';\n                fillRect(ctx, leftPx2, topPx, w2, heightPx, canvasWidth, c2);\n            }\n        }\n    }\n}\n","import { getAlignmentShapeColor } from './getAlignmentShapeColor';\nimport { renderAlignmentShape } from './renderAlignmentShape';\nimport { renderPerBaseQuality } from './renderPerBaseQuality';\nimport { renderPerBaseLettering } from './renderPerBaseLettering';\nimport { renderModifications } from './renderModifications';\nimport { renderMethylation } from './renderMethylation';\nexport function renderAlignment({ ctx, feat, renderArgs, colorForBase, contrastForBase, charWidth, charHeight, defaultColor, canvasWidth, }) {\n    const { config, bpPerPx, regions, colorBy, colorTagMap = {} } = renderArgs;\n    const { tag = '', type: colorType = '' } = colorBy || {};\n    const { feature } = feat;\n    const region = regions[0];\n    ctx.fillStyle = getAlignmentShapeColor({\n        feature,\n        config,\n        tag,\n        defaultColor,\n        colorType,\n        colorTagMap,\n    });\n    renderAlignmentShape({ ctx, feat, renderArgs });\n    // second pass for color types that render per-base things that go over the\n    // existing drawing\n    switch (colorType) {\n        case 'perBaseQuality':\n            renderPerBaseQuality({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                canvasWidth,\n            });\n            break;\n        case 'perBaseLettering':\n            renderPerBaseLettering({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                colorForBase,\n                contrastForBase,\n                charWidth,\n                charHeight,\n                canvasWidth,\n            });\n            break;\n        case 'modifications':\n            renderModifications({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                renderArgs,\n                canvasWidth,\n            });\n            break;\n        case 'methylation':\n            renderMethylation({\n                ctx,\n                feat,\n                region,\n                bpPerPx,\n                renderArgs,\n                canvasWidth,\n            });\n            break;\n    }\n}\n","import { bpSpanPx, measureText } from '@jbrowse/core/util';\nimport { fillRect } from './util';\nimport { colord } from '@jbrowse/core/util/colord';\nexport function renderMismatches({ ctx, feat, renderArgs, minSubfeatureWidth, largeInsertionIndicatorScale, mismatchAlpha, charWidth, charHeight, colorForBase, contrastForBase, canvasWidth, drawSNPsMuted, drawIndels = true, }) {\n    const { bpPerPx, regions } = renderArgs;\n    const { heightPx, topPx, feature } = feat;\n    const region = regions[0];\n    const start = feature.get('start');\n    const pxPerBp = Math.min(1 / bpPerPx, 2);\n    const mismatches = feature.get('mismatches');\n    const heightLim = charHeight - 2;\n    // extraHorizontallyFlippedOffset is used to draw interbase items, which\n    // are located to the left when forward and right when reversed\n    const extraHorizontallyFlippedOffset = region.reversed ? 1 / bpPerPx + 1 : -1;\n    if (!mismatches) {\n        return;\n    }\n    // two pass rendering: first pass, draw all the mismatches except wide\n    // insertion markers\n    for (const mismatch of mismatches) {\n        const mstart = start + mismatch.start;\n        const mlen = mismatch.length;\n        const mbase = mismatch.base;\n        const [leftPx, rightPx] = bpSpanPx(mstart, mstart + mlen, region, bpPerPx);\n        const widthPx = Math.max(minSubfeatureWidth, Math.abs(leftPx - rightPx));\n        if (mismatch.type === 'mismatch') {\n            if (!drawSNPsMuted) {\n                const baseColor = colorForBase[mismatch.base] || '#888';\n                const c = mismatchAlpha\n                    ? mismatch.qual === undefined\n                        ? baseColor\n                        : colord(baseColor)\n                            .alpha(Math.min(1, mismatch.qual / 50))\n                            .toHslString()\n                    : baseColor;\n                fillRect(ctx, Math.round(leftPx), topPx, widthPx, heightPx, canvasWidth, c);\n            }\n            if (widthPx >= charWidth && heightPx >= heightLim) {\n                // normal SNP coloring\n                const contrastColor = drawSNPsMuted\n                    ? 'black'\n                    : contrastForBase[mismatch.base] || 'black';\n                ctx.fillStyle = mismatchAlpha\n                    ? mismatch.qual === undefined\n                        ? contrastColor\n                        : colord(contrastColor)\n                            .alpha(Math.min(1, mismatch.qual / 50))\n                            .toHslString()\n                    : contrastColor;\n                ctx.fillText(mbase, leftPx + (widthPx - charWidth) / 2 + 1, topPx + heightPx);\n            }\n        }\n        else if (mismatch.type === 'deletion' && drawIndels) {\n            fillRect(ctx, leftPx, topPx, Math.abs(leftPx - rightPx), heightPx, canvasWidth, colorForBase.deletion);\n            const txt = `${mismatch.length}`;\n            const rwidth = measureText(txt, 10);\n            if (widthPx >= rwidth && heightPx >= heightLim) {\n                ctx.fillStyle = contrastForBase.deletion;\n                ctx.fillText(txt, (leftPx + rightPx) / 2 - rwidth / 2, topPx + heightPx);\n            }\n        }\n        else if (mismatch.type === 'insertion' && drawIndels) {\n            ctx.fillStyle = 'purple';\n            const pos = leftPx + extraHorizontallyFlippedOffset;\n            const len = +mismatch.base || mismatch.length;\n            const insW = Math.max(0, Math.min(1.2, 1 / bpPerPx));\n            if (len < 10) {\n                fillRect(ctx, pos, topPx, insW, heightPx, canvasWidth, 'purple');\n                if (1 / bpPerPx >= charWidth && heightPx >= heightLim) {\n                    const l = pos - insW;\n                    fillRect(ctx, l, topPx, insW * 3, 1, canvasWidth);\n                    fillRect(ctx, l, topPx + heightPx - 1, insW * 3, 1, canvasWidth);\n                    ctx.fillText(`(${mismatch.base})`, pos + 3, topPx + heightPx);\n                }\n            }\n        }\n        else if (mismatch.type === 'hardclip' || mismatch.type === 'softclip') {\n            const pos = leftPx + extraHorizontallyFlippedOffset;\n            const c = mismatch.type === 'hardclip' ? 'red' : 'blue';\n            const clipW = Math.max(minSubfeatureWidth, pxPerBp);\n            fillRect(ctx, pos, topPx, clipW, heightPx, canvasWidth, c);\n            if (1 / bpPerPx >= charWidth && heightPx >= heightLim) {\n                const l = pos - clipW;\n                fillRect(ctx, l, topPx, clipW * 3, 1, canvasWidth);\n                fillRect(ctx, l, topPx + heightPx - 1, clipW * 3, 1, canvasWidth);\n                ctx.fillText(`(${mismatch.base})`, pos + 3, topPx + heightPx);\n            }\n        }\n        else if (mismatch.type === 'skip') {\n            // fix to avoid bad rendering note that this was also related to chrome\n            // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1131528\n            // also affected firefox ref #1236 #2750\n            if (leftPx + widthPx > 0) {\n                // make small exons more visible when zoomed far out\n                const adjustPx = widthPx - (bpPerPx > 10 ? 1.5 : 0);\n                ctx.clearRect(leftPx, topPx, adjustPx, heightPx);\n                fillRect(ctx, Math.max(0, leftPx), topPx + heightPx / 2 - 1, adjustPx + Math.min(leftPx, 0), 2, canvasWidth, '#333');\n            }\n        }\n    }\n    // second pass, draw wide insertion markers on top\n    if (drawIndels) {\n        for (const mismatch of mismatches) {\n            const mstart = start + mismatch.start;\n            const mlen = mismatch.length;\n            const [leftPx] = bpSpanPx(mstart, mstart + mlen, region, bpPerPx);\n            const len = +mismatch.base || mismatch.length;\n            const txt = `${len}`;\n            if (mismatch.type === 'insertion' && len >= 10) {\n                if (bpPerPx > largeInsertionIndicatorScale) {\n                    fillRect(ctx, leftPx - 1, topPx, 2, heightPx, canvasWidth, 'purple');\n                }\n                else if (heightPx > charHeight) {\n                    const rwidth = measureText(txt);\n                    const padding = 5;\n                    fillRect(ctx, leftPx - rwidth / 2 - padding, topPx, rwidth + 2 * padding, heightPx, canvasWidth, 'purple');\n                    ctx.fillStyle = 'white';\n                    ctx.fillText(txt, leftPx - rwidth / 2, topPx + heightPx);\n                }\n                else {\n                    const padding = 2;\n                    fillRect(ctx, leftPx - padding, topPx, 2 * padding, heightPx, canvasWidth, 'purple');\n                }\n            }\n        }\n    }\n}\n","import { readConfObject, } from '@jbrowse/core/configuration';\nimport { bpSpanPx } from '@jbrowse/core/util';\n// locals\nimport { parseCigar } from '../MismatchParser';\nimport { fillRect, getCharWidthHeight } from './util';\nexport function renderSoftClipping({ ctx, feat, renderArgs, config, theme, colorForBase, canvasWidth, }) {\n    const { feature, topPx, heightPx } = feat;\n    const { regions, bpPerPx } = renderArgs;\n    const region = regions[0];\n    const minFeatWidth = readConfObject(config, 'minSubfeatureWidth');\n    const mismatches = feature.get('mismatches');\n    const seq = feature.get('seq');\n    const { charWidth, charHeight } = getCharWidthHeight();\n    // Display all bases softclipped off in lightened colors\n    if (!(seq && mismatches)) {\n        return;\n    }\n    const heightLim = charHeight - 2;\n    const CIGAR = parseCigar(feature.get('CIGAR'));\n    let seqOffset = 0;\n    let refOffset = 0;\n    for (let i = 0; i < CIGAR.length; i += 2) {\n        const op = CIGAR[i + 1];\n        const len = +CIGAR[i];\n        if (op === 'S') {\n            for (let k = 0; k < len; k++) {\n                const base = seq[seqOffset + k];\n                const s0 = feature.get('start') - (i === 0 ? len : 0) + refOffset + k;\n                const [leftPx, rightPx] = bpSpanPx(s0, s0 + 1, region, bpPerPx);\n                const widthPx = Math.max(minFeatWidth, rightPx - leftPx);\n                // Black accounts for IUPAC ambiguity code bases such as N that\n                // show in soft clipping\n                const baseColor = colorForBase[base] || '#000000';\n                ctx.fillStyle = baseColor;\n                fillRect(ctx, leftPx, topPx, widthPx, heightPx, canvasWidth);\n                if (widthPx >= charWidth && heightPx >= heightLim) {\n                    ctx.fillStyle = theme.palette.getContrastText(baseColor);\n                    ctx.fillText(base, leftPx + (widthPx - charWidth) / 2 + 1, topPx + heightPx);\n                }\n            }\n            seqOffset += len;\n        }\n        if (op === 'N') {\n            refOffset += len;\n        }\n        if (op === 'M' || op === '=' || op === 'X') {\n            refOffset += len;\n            seqOffset += len;\n        }\n        if (op === 'H') {\n            // do nothing\n        }\n        if (op === 'D') {\n            refOffset += len;\n        }\n        if (op === 'I') {\n            seqOffset += len;\n        }\n    }\n}\n","import { readConfObject } from '@jbrowse/core/configuration';\nimport { createJBrowseTheme } from '@jbrowse/core/ui';\nimport { getCharWidthHeight, getColorBaseMap, getContrastBaseMap, shouldDrawIndels, shouldDrawSNPsMuted, } from './util';\nimport { renderAlignment } from './renderAlignment';\nimport { renderMismatches } from './renderMismatches';\nimport { renderSoftClipping } from './renderSoftClipping';\nexport function makeImageData({ ctx, layoutRecords, canvasWidth, renderArgs, }) {\n    const { config, showSoftClip, colorBy, theme: configTheme } = renderArgs;\n    const mismatchAlpha = readConfObject(config, 'mismatchAlpha');\n    const minSubfeatureWidth = readConfObject(config, 'minSubfeatureWidth');\n    const largeInsertionIndicatorScale = readConfObject(config, 'largeInsertionIndicatorScale');\n    const defaultColor = readConfObject(config, 'color') === '#f0f';\n    const theme = createJBrowseTheme(configTheme);\n    const colorForBase = getColorBaseMap(theme);\n    const contrastForBase = getContrastBaseMap(theme);\n    ctx.font = 'bold 10px Courier New,monospace';\n    const { charWidth, charHeight } = getCharWidthHeight();\n    const drawSNPsMuted = shouldDrawSNPsMuted(colorBy === null || colorBy === void 0 ? void 0 : colorBy.type);\n    const drawIndels = shouldDrawIndels();\n    for (const feat of layoutRecords) {\n        renderAlignment({\n            ctx,\n            feat,\n            renderArgs,\n            defaultColor,\n            colorForBase,\n            contrastForBase,\n            charWidth,\n            charHeight,\n            canvasWidth,\n        });\n        renderMismatches({\n            ctx,\n            feat,\n            renderArgs,\n            mismatchAlpha,\n            drawSNPsMuted,\n            drawIndels,\n            largeInsertionIndicatorScale,\n            minSubfeatureWidth,\n            charWidth,\n            charHeight,\n            colorForBase,\n            contrastForBase,\n            canvasWidth,\n        });\n        if (showSoftClip) {\n            renderSoftClipping({\n                ctx,\n                feat,\n                renderArgs,\n                colorForBase,\n                config,\n                theme,\n                canvasWidth,\n            });\n        }\n    }\n    return undefined;\n}\n"],"names":["fillRect","ctx","l","t","w","cw","color","getColorBaseMap","theme","bases","getContrastBaseMap","key","value","shouldDrawSNPsMuted","type","shouldDrawIndels","getCharWidthHeight","charWidth","measureText","charHeight","colorByInsertSize","feature","colorByMappingQuality","getOrientation","config","orientationType","readConfObject","orientation","orientationTypes","colorByStrand","colorByOrientation","fillColor","getStranded","flags","strand","flipper","colorByStrandedRnaSeq","getAlignmentShapeColor","colorType","tag","defaultColor","colorTagMap","tags","val","renderAlignmentShape","feat","renderArgs","regions","bpPerPx","heightPx","topPx","region","s","e","leftPx","rightPx","bpSpanPx","flip","renderPerBaseQuality","canvasWidth","scores","cigarOps","parseCigar","start","soffset","roffset","i","len","op","m","score","start0","c","renderPerBaseLettering","colorForBase","contrastForBase","heightLim","seq","letter","r","renderModifications","modificationTagMap","mm","getTagAlt","cigar","probabilities","getModificationProbabilities","modifications","getModificationPositions","probIndex","positions","col","base","colord","readPos","getNextRefPos","prob","renderMethylation","_a","_b","regionSequence","fstart","fend","methBins","methProbs","getMethBins","getCol","k","p","j","l1","l2","leftPx2","rightPx2","w2","c2","renderAlignment","colorBy","renderMismatches","minSubfeatureWidth","largeInsertionIndicatorScale","mismatchAlpha","drawSNPsMuted","drawIndels","pxPerBp","mismatches","extraHorizontallyFlippedOffset","mismatch","mstart","mlen","mbase","widthPx","baseColor","contrastColor","txt","rwidth","pos","insW","clipW","adjustPx","padding","renderSoftClipping","minFeatWidth","CIGAR","seqOffset","refOffset","s0","makeImageData","layoutRecords","showSoftClip","configTheme","createJBrowseTheme"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}