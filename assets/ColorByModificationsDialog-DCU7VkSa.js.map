{"version":3,"file":"ColorByModificationsDialog-DCU7VkSa.js","sources":["../node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/ModificationsTable.js","../node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/ColorByModificationsDialog.js"],"sourcesContent":["import React from 'react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    table: {\n        border: '1px solid #888',\n        margin: theme.spacing(4),\n        '& td': {\n            padding: theme.spacing(1),\n        },\n    },\n}));\nexport default function ModificationTable({ modifications, }) {\n    const { classes } = useStyles();\n    return (React.createElement(\"table\", { className: classes.table },\n        React.createElement(\"tbody\", null, modifications.map(([key, value]) => (React.createElement(\"tr\", { key: key },\n            React.createElement(\"td\", null, key),\n            React.createElement(\"td\", null, value),\n            React.createElement(\"td\", { style: {\n                    width: '1em',\n                    background: value,\n                } })))))));\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, CircularProgress, DialogActions, DialogContent, Typography, } from '@mui/material';\nimport { Dialog } from '@jbrowse/core/ui';\nimport ModificationTable from './ModificationsTable';\nconst ColorByModificationsDialog = observer(function ({ model, handleClose, }) {\n    const { colorBy, modificationTagMap } = model;\n    const modifications = [...modificationTagMap.entries()];\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Color by modifications\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null, \"You can choose to color the modifications in the BAM/CRAM MM/ML specification using this dialog. Choosing modifications colors the modified positions and can color multiple modification types. Choosing the methylation setting colors methylated and unmethylated CpG.\"),\n            React.createElement(Typography, null, \"Note: you can revisit this dialog to see the current mapping of colors to modification type for the modification coloring mode\"),\n            React.createElement(\"div\", { style: { margin: 20 } },\n                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'modifications' ? (React.createElement(\"div\", null, modifications.length ? (React.createElement(React.Fragment, null,\n                    \"Current modification-type-to-color mapping\",\n                    React.createElement(ModificationTable, { modifications: [...modificationTagMap.entries()] }))) : (React.createElement(React.Fragment, null,\n                    React.createElement(Typography, null, \"Note: color by modifications is already enabled. Loading current modifications...\"),\n                    React.createElement(CircularProgress, { size: 15 }))))) : null,\n                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'methylation' ? (React.createElement(ModificationTable, { modifications: [\n                        ['methylated', 'red'],\n                        ['unmethylated', 'blue'],\n                    ] })) : null),\n            React.createElement(DialogActions, null,\n                React.createElement(Button, { variant: \"contained\", onClick: () => {\n                        model.setColorScheme({ type: 'modifications' });\n                        handleClose();\n                    } }, \"Modifications\"),\n                React.createElement(Button, { variant: \"contained\", onClick: () => {\n                        model.setColorScheme({ type: 'methylation' });\n                        handleClose();\n                    } }, \"Methylation\"),\n                React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                        handleClose();\n                    } }, \"Cancel\")))));\n});\nexport default ColorByModificationsDialog;\n"],"names":["useStyles","makeStyles","theme","ModificationTable","modifications","classes","React","key","value","ColorByModificationsDialog","observer","model","handleClose","colorBy","modificationTagMap","Dialog","DialogContent","Typography","CircularProgress","DialogActions","Button"],"mappings":"oGAEA,MAAMA,EAAYC,EAAY,EAACC,IAAU,CACrC,MAAO,CACH,OAAQ,iBACR,OAAQA,EAAM,QAAQ,CAAC,EACvB,OAAQ,CACJ,QAASA,EAAM,QAAQ,CAAC,CAC3B,CACJ,CACL,EAAE,EACa,SAASC,EAAkB,CAAE,cAAAC,GAAkB,CAC1D,KAAM,CAAE,QAAAC,CAAS,EAAGL,EAAW,EAC/B,OAAQM,EAAM,cAAc,QAAS,CAAE,UAAWD,EAAQ,KAAO,EAC7DC,EAAM,cAAc,QAAS,KAAMF,EAAc,IAAI,CAAC,CAACG,EAAKC,CAAK,IAAOF,EAAM,cAAc,KAAM,CAAE,IAAKC,CAAK,EAC1GD,EAAM,cAAc,KAAM,KAAMC,CAAG,EACnCD,EAAM,cAAc,KAAM,KAAME,CAAK,EACrCF,EAAM,cAAc,KAAM,CAAE,MAAO,CAC3B,MAAO,MACP,WAAYE,CAChC,EAAmB,CAAC,CAAE,CAAC,CAAC,CACxB,CChBK,MAACC,EAA6BC,EAAS,SAAU,CAAE,MAAAC,EAAO,YAAAC,CAAW,EAAK,CAC3E,KAAM,CAAE,QAAAC,EAAS,mBAAAC,CAAkB,EAAKH,EAClCP,EAAgB,CAAC,GAAGU,EAAmB,QAAO,CAAE,EACtD,OAAQR,EAAM,cAAcS,EAAAA,OAAQ,CAAE,KAAM,GAAM,QAASH,EAAa,MAAO,wBAA0B,EACrGN,EAAM,cAAcU,EAAe,KAC/BV,EAAM,cAAcW,EAAY,KAAM,2QAA2Q,EACjTX,EAAM,cAAcW,EAAY,KAAM,gIAAgI,EACtKX,EAAM,cAAc,MAAO,CAAE,MAAO,CAAE,OAAQ,GAAM,GAC/CO,GAAY,KAA6B,OAASA,EAAQ,QAAU,gBAAmBP,EAAM,cAAc,MAAO,KAAMF,EAAc,OAAUE,EAAM,cAAcA,EAAM,SAAU,KACjL,6CACAA,EAAM,cAAcH,EAAmB,CAAE,cAAe,CAAC,GAAGW,EAAmB,QAAS,CAAA,CAAG,CAAA,CAAC,EAAMR,EAAM,cAAcA,EAAM,SAAU,KACtIA,EAAM,cAAcW,EAAY,KAAM,mFAAmF,EACzHX,EAAM,cAAcY,EAAkB,CAAE,KAAM,GAAI,CAAC,CAAE,EAAK,MAC7DL,GAAY,KAA6B,OAASA,EAAQ,QAAU,cAAiBP,EAAM,cAAcH,EAAmB,CAAE,cAAe,CACtI,CAAC,aAAc,KAAK,EACpB,CAAC,eAAgB,MAAM,CAC/C,CAAuB,CAAA,EAAK,IAAI,EACpBG,EAAM,cAAca,EAAe,KAC/Bb,EAAM,cAAcc,EAAQ,CAAE,QAAS,YAAa,QAAS,IAAM,CAC3DT,EAAM,eAAe,CAAE,KAAM,eAAe,CAAE,EAC9CC,EAAa,CAChB,CAAA,EAAI,eAAe,EACxBN,EAAM,cAAcc,EAAQ,CAAE,QAAS,YAAa,QAAS,IAAM,CAC3DT,EAAM,eAAe,CAAE,KAAM,aAAa,CAAE,EAC5CC,EAAa,CAChB,CAAA,EAAI,aAAa,EACtBN,EAAM,cAAcc,EAAQ,CAAE,QAAS,YAAa,MAAO,YAAa,QAAS,IAAM,CAC/ER,EAAa,CACrC,GAAyB,QAAQ,CAAC,CAAC,CAAC,CACpC,CAAC","x_google_ignoreList":[0,1]}