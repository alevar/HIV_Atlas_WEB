{"version":3,"file":"index-K_NnFkVh.js","sources":["../../node_modules/@jbrowse/plugin-variants/esm/VcfFeature/util.js","../../node_modules/@jbrowse/plugin-variants/esm/VcfFeature/index.js"],"sourcesContent":["import { parseBreakend } from '@gmod/vcf';\nconst altTypeToSO = {\n    DEL: 'deletion',\n    INS: 'insertion',\n    DUP: 'duplication',\n    INV: 'inversion',\n    INVDUP: 'inverted_duplication',\n    CNV: 'copy_number_variation',\n    TRA: 'translocation',\n    'DUP:TANDEM': 'tandem_duplication',\n    NON_REF: 'sequence_variant',\n    '*': 'sequence_variant',\n};\n/**\n * Get a sequence ontology (SO) term that describes the variant type\n */\nexport function getSOTermAndDescription(ref, alt, parser) {\n    // it's just a remark if there are no alternate alleles\n    if (!alt || alt.length === 0) {\n        return ['remark', 'no alternative alleles'];\n    }\n    const soTerms = new Set();\n    let descriptions = new Set();\n    alt.forEach(a => {\n        let [soTerm, description] = getSOAndDescFromAltDefs(a, parser);\n        if (!soTerm) {\n            ;\n            [soTerm, description] = getSOAndDescByExamination(ref, a);\n        }\n        if (soTerm && description) {\n            soTerms.add(soTerm);\n            descriptions.add(description);\n        }\n    });\n    // Combine descriptions like [\"SNV G -> A\", \"SNV G -> T\"] to [\"SNV G -> A,T\"]\n    if (descriptions.size > 1) {\n        const descs = [...descriptions];\n        const prefixes = new Set(descs\n            .map(desc => {\n            const prefix = desc.split('->');\n            return prefix[1] ? prefix[0] : desc;\n        })\n            .filter((f) => !!f));\n        descriptions = new Set([...prefixes]\n            .map(r => r.trim())\n            .map(prefix => {\n            const suffixes = descs\n                .map(desc => desc.split('->').map(r => r.trim()))\n                .map(pref => (pref[1] && pref[0] === prefix ? pref[1] : ''))\n                .filter(f => !!f);\n            return suffixes.length ? `${prefix} -> ${suffixes.join(',')}` : prefix;\n        }));\n    }\n    if (soTerms.size) {\n        return [[...soTerms].join(','), [...descriptions].join(',')];\n    }\n    return [];\n}\nexport function getSOAndDescFromAltDefs(alt, parser) {\n    if (typeof alt === 'string' && !alt.startsWith('<')) {\n        return [];\n    }\n    // look for a definition with an SO type for this\n    let soTerm = altTypeToSO[alt];\n    // if no SO term but ALT is in metadata, assume sequence_variant\n    if (!soTerm && parser.getMetadata('ALT', alt)) {\n        soTerm = 'sequence_variant';\n    }\n    if (soTerm) {\n        return [soTerm, alt];\n    }\n    // try to look for a definition for a parent term if we can\n    const modAlt = alt.split(':');\n    if (modAlt.length > 1) {\n        return getSOAndDescFromAltDefs(`<${modAlt.slice(0, -1).join(':')}>`, parser);\n    }\n    // no parent\n    return [];\n}\n// note: term SNV is used instead of SNP because SO definition of SNP says\n// abundance must be at least 1% in population, and can't be sure we meet\n// that\nexport function getSOAndDescByExamination(ref, alt) {\n    const bnd = parseBreakend(alt);\n    if (bnd) {\n        return ['breakend', alt];\n    }\n    if (ref.length === 1 && alt.length === 1) {\n        return ['SNV', makeDescriptionString('SNV', ref, alt)];\n    }\n    if (alt === '<INS>') {\n        return ['insertion', alt];\n    }\n    if (alt === '<DEL>') {\n        return ['deletion', alt];\n    }\n    if (alt === '<DUP>') {\n        return ['duplication', alt];\n    }\n    if (alt === '<CNV>') {\n        return ['cnv', alt];\n    }\n    if (alt === '<INV>') {\n        return ['inversion', alt];\n    }\n    if (alt === '<TRA>') {\n        return ['translocation', alt];\n    }\n    if (alt.includes('<')) {\n        return ['sv', alt];\n    }\n    if (ref.length === alt.length) {\n        return ref.split('').reverse().join('') === alt\n            ? ['inversion', makeDescriptionString('inversion', ref, alt)]\n            : ['substitution', makeDescriptionString('substitution', ref, alt)];\n    }\n    if (ref.length <= alt.length) {\n        const len = alt.length - ref.length;\n        const lena = len.toLocaleString('en-US');\n        return [\n            'insertion',\n            len > 5 ? `${lena}bp INS` : makeDescriptionString('insertion', ref, alt),\n        ];\n    }\n    if (ref.length > alt.length) {\n        const len = ref.length - alt.length;\n        const lena = len.toLocaleString('en-US');\n        return [\n            'deletion',\n            len > 5 ? `${lena}bp DEL` : makeDescriptionString('deletion', ref, alt),\n        ];\n    }\n    return ['indel', makeDescriptionString('indel', ref, alt)];\n}\nfunction makeDescriptionString(soTerm, ref, alt) {\n    return `${soTerm} ${ref} -> ${alt}`;\n}\n","// locals\nimport { getSOTermAndDescription } from './util';\nexport default class VCFFeature {\n    constructor(args) {\n        this.variant = args.variant;\n        this.parser = args.parser;\n        this.data = this.dataFromVariant(this.variant);\n        this._id = args.id;\n    }\n    get(field) {\n        var _a;\n        return field === 'samples'\n            ? this.variant.SAMPLES\n            : ((_a = this.data[field]) !== null && _a !== void 0 ? _a : this.variant[field]);\n    }\n    set() { }\n    parent() {\n        return undefined;\n    }\n    children() {\n        return undefined;\n    }\n    tags() {\n        return [...Object.keys(this.data), ...Object.keys(this.variant), 'samples'];\n    }\n    id() {\n        return this._id;\n    }\n    dataFromVariant(variant) {\n        const { REF, ALT, POS, CHROM, INFO, ID } = variant;\n        const start = POS - 1;\n        const [type, description] = getSOTermAndDescription(REF, ALT, this.parser);\n        const isTRA = ALT === null || ALT === void 0 ? void 0 : ALT.includes('<TRA>');\n        const isSymbolic = ALT === null || ALT === void 0 ? void 0 : ALT.some(f => f.includes('<'));\n        return {\n            refName: CHROM,\n            start,\n            end: isSymbolic && INFO.END && !isTRA ? +INFO.END[0] : start + REF.length,\n            description,\n            type,\n            name: ID === null || ID === void 0 ? void 0 : ID.join(','),\n            aliases: ID && ID.length > 1 ? ID.slice(1) : undefined,\n        };\n    }\n    toJSON() {\n        return {\n            uniqueId: this._id,\n            ...this.variant,\n            ...this.data,\n            samples: this.variant.SAMPLES,\n        };\n    }\n}\n"],"names":["altTypeToSO","getSOTermAndDescription","ref","alt","parser","soTerms","descriptions","a","soTerm","description","getSOAndDescFromAltDefs","getSOAndDescByExamination","descs","prefixes","desc","prefix","f","r","suffixes","pref","modAlt","parseBreakend","makeDescriptionString","len","lena","VCFFeature","args","field","_a","variant","REF","ALT","POS","CHROM","INFO","ID","start","type","isTRA","isSymbolic"],"mappings":"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","x_google_ignoreList":[0,1]}