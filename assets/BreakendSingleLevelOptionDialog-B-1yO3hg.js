import{m as $,R as t,w as x,C as N,o as z,r as C,b as O,D as V,x as D,a as b,u as v,y as _,K as R,v as F}from"./rpcWorker-CL9qhe4-.js";const j=$()({block:{display:"block"}});function B({checked:s,disabled:i,label:n,onChange:e}){const{classes:d}=j();return t.createElement(x,{disabled:i,className:d.block,control:t.createElement(N,{checked:s,onChange:e}),label:n})}function L(s){return s.map(({id:i,displays:n,...e})=>({...e,displays:n.map(({id:d,...c})=>c)}))}const T=z(function({model:s,handleClose:i,feature:n,assemblyName:e,viewType:d,view:c}){const[k,y]=C.useState(!0),[u,f]=C.useState(!0);return t.createElement(O.Dialog,{open:!0,onClose:i,title:"Multi-level breakpoint split view options"},t.createElement(V,null,t.createElement(B,{checked:k,label:"Copy tracks into the new view",onChange:a=>{y(a.target.checked)}}),k?t.createElement(B,{checked:u,disabled:!k,label:"Mirror the copied tracks (only available if copying tracks and using two level)",onChange:a=>{f(a.target.checked)}}):null),t.createElement(D,null,t.createElement(b,{onClick:()=>{(async()=>{const a=v.getSession(s);try{const o=await a.assemblyManager.waitForAssembly(e);if(!o)throw new Error(`assembly ${e} not found`);const{refName:r,pos:w,mateRefName:p,matePos:m}=d.getBreakendCoveringRegions({feature:n,assembly:o}),g=_(c.tracks),l=a.addView("BreakpointSplitView",{type:"BreakpointSplitView",displayName:`${n.get("name")||n.get("id")||"breakend"} split detail`,views:[{type:"LinearGenomeView",hideHeader:!0,tracks:L(_(c.tracks))},{type:"LinearGenomeView",hideHeader:!0,tracks:L(u?[...g].reverse():g)}]}),h=o.regions.find(E=>E.refName===r),S=o.regions.find(E=>E.refName===p);if(!h||!S)throw new Error("can't find regions");await Promise.all([l.views[0].navToLocations([{refName:r,start:h.start,end:w,assemblyName:e},{refName:r,start:w+1,end:h.end,assemblyName:e}]),l.views[1].navToLocations([{refName:p,start:S.start,end:m,assemblyName:e},{refName:p,start:m+1,end:S.end,assemblyName:e}])]),await R(()=>l.views[1].initialized&&l.views[0].initialized),l.views[1].zoomTo(10),l.views[0].zoomTo(10),l.views[1].centerAt(m,p),l.views[0].centerAt(w,r)}catch(o){console.error(o),a.notify(`${o}`)}})(),i()},variant:"contained",color:"primary",autoFocus:!0},"OK"),t.createElement(b,{color:"secondary",variant:"contained",onClick:()=>{i()}},"Cancel")))});function A(s){return s.map(({id:i,displays:n,...e})=>({...e,displays:n.map(({id:d,...c})=>c)}))}const M=z(function({model:s,handleClose:i,feature:n,assemblyName:e,viewType:d,view:c}){const[k,y]=C.useState(!0),[u,f]=v.useLocalStorage("breakpointWindowSize","5000");return t.createElement(O.Dialog,{open:!0,onClose:i,title:"Single-level breakpoint split view options"},t.createElement(V,null,t.createElement(B,{checked:k,label:"Copy tracks into the new view",onChange:a=>{y(a.target.checked)}}),t.createElement(F,{label:"Window size (bp)",value:u,onChange:a=>{f(a.target.value)}})),t.createElement(D,null,t.createElement(b,{onClick:()=>{const a=v.getSession(s);(async()=>{try{const o=a.assemblyManager.get(e),r=+u;if(Number.isNaN(r))throw new Error("windowSize not a number");const{refName:w,pos:p,mateRefName:m,matePos:g}=d.getBreakendCoveringRegions({feature:n,assembly:o});await a.addView("BreakpointSplitView",{type:"BreakpointSplitView",displayName:`${n.get("name")||n.get("id")||"breakend"} split detail`,views:[{type:"LinearGenomeView",tracks:A(_(c.tracks))}]}).views[0].navToLocations(v.gatherOverlaps([{refName:w,start:Math.max(0,p-r),end:p+r,assemblyName:e},{refName:m,start:Math.max(0,g-r),end:g+r,assemblyName:e}],r))}catch(o){console.error(o),a.notify(`${o}`)}})(),i()},variant:"contained",color:"primary",autoFocus:!0},"OK"),t.createElement(b,{color:"secondary",variant:"contained",onClick:()=>{i()}},"Cancel")))});var K=Object.freeze({__proto__:null,default:T}),P=Object.freeze({__proto__:null,default:M}),W=Object.freeze({__proto__:null,default:T}),H=Object.freeze({__proto__:null,default:M});export{K as B,P as a,W as b,H as c};
//# sourceMappingURL=BreakendSingleLevelOptionDialog-B-1yO3hg.js.map
