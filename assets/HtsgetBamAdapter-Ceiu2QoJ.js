import{ay as w,a1 as p}from"./index-Do-r7xR6.js";import{B as T,a as I,p as k,b as A}from"./BamAdapter-CJqSEKNu.js";import"./crc32-DkJB1gsa.js";async function b(u,t){const r=await Promise.all(u.map(async e=>{const{url:a,headers:s}=e;if(a.startsWith("data:"))return w.Buffer.from(a.split(",")[1],"base64");{const{referer:h,...i}=s,n=await fetch(a,{...t,headers:{...t==null?void 0:t.headers,...i}});if(!n.ok)throw new Error(`HTTP ${n.status} fetching ${a}: ${await n.text()}`);return w.Buffer.from(await n.arrayBuffer())}}));return w.Buffer.concat(await Promise.all(r.map(e=>p(e))))}class B extends T{constructor(t){super({htsget:!0}),this.baseUrl=t.baseUrl,this.trackId=t.trackId}async*streamRecordsForRange(t,r,e,a){var s;const i=`${`${this.baseUrl}/${this.trackId}`}?referenceName=${t}&start=${r}&end=${e}&format=BAM`,n=(s=this.chrToIndex)===null||s===void 0?void 0:s[t];if(n===void 0)yield[];else{const o=await fetch(i,{...a});if(!o.ok)throw new Error(`HTTP ${o.status} fetching ${i}: ${await o.text()}`);const c=await o.json(),l=await b(c.htsget.urls.slice(1),a);yield*this._fetchChunkFeatures([{buffer:l,_fetchedSize:void 0,bin:0,compareTo(){return 0},toUniqueString(){return`${t}_${r}_${e}`},fetchedSize(){return 0},minv:{dataPosition:0,blockPosition:0,compareTo:()=>0},maxv:{dataPosition:Number.MAX_SAFE_INTEGER,blockPosition:0,compareTo:()=>0},toString(){return`${t}_${r}_${e}`}}],n,r,e,a)}}async _readChunk({chunk:t}){if(!t.buffer)throw new Error("expected chunk.buffer in htsget");return{data:t.buffer,cpositions:[],dpositions:[],chunk:t}}async getHeader(t={}){const r=`${this.baseUrl}/${this.trackId}?referenceName=na&class=header`,e=await fetch(r,t);if(!e.ok)throw new Error(`HTTP ${e.status} fetching ${r}: ${await e.text()}`);const a=await e.json(),s=await b(a.htsget.urls,t);if(s.readInt32LE(0)!==I)throw new Error("Not a BAM file");const h=s.readInt32LE(4),i=s.toString("utf8",8,8+h),n=k(i),o=[],c={},l=n.filter(f=>f.tag==="SQ");for(const[f,$]of l.entries()){let g="",m=0;for(const d of $.data)d.tag==="SN"?g=d.value:d.tag==="LN"&&(m=+d.value);c[g]=f,o[f]={refName:g,length:m}}return this.chrToIndex=c,this.indexToChr=o,n}}class E extends A{async configurePre(){const t=this.getConf("htsgetBase"),r=this.getConf("htsgetTrackId"),e=new B({baseUrl:t,trackId:r}),a=this.getConf("sequenceAdapter");if(a&&this.getSubAdapter){const s=await this.getSubAdapter(a);return{bam:e,sequenceAdapter:s.dataAdapter}}return{bam:e}}}export{E as default};
//# sourceMappingURL=HtsgetBamAdapter-Ceiu2QoJ.js.map
